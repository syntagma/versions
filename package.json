{
  "name": "syntagma-versions",
  "version": "0.0.4",
  "description": "Project Forked and Improved from Content Delivery Network",
  "main": "index.js",
  "scripts": {
    "start": "bin/versions",
    "test": "./node_modules/.bin/mocha $(find test -name '*.test.js')"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/syntagma/versions"
  },
  "keywords": [
    "cdn",
    "content",
    "delivery",
    "network",
    "file",
    "serving",
    "fetching",
    "caching",
    "cacher",
    "versions",
    "versioning"
  ],
  "author": {
    "name": "Matias Liwski"
  },
  "license": "MIT",
  "dependencies": {
    "connect": "2.7.x",
    "cookie": "0.0.x",
    "devnull": "0.0.x",
    "expirable": "0.0.x",
    "hashring": "1.0.x",
    "request": "2.14.x",
    "semver": "1.1.x"
  },
  "devDependencies": {
    "chai": "1.5.x",
    "mocha": "1.8.x",
    "redis": "0.8.x",
    "sinon": "1.6.x",
    "sinon-chai": "2.3.x",
    "versions": "git://github.com/syntagma/versions.git"
  },
  "readme": "# syntagma-versions\n\nSyntagma/Matias Liwski forked original project to extend functionality.\nIf manufacturer accept our new features, we will merge projects.\nFor now, is a separate npm module because we need it for our own products.\n\n# Next, original documentation of manufacturer:\n\n\nVersions is a simple but powerful node.js module that allows you to create a\nflexible static server or content delivery network. Serving static assets is a\npain in Node, it's not something it focuses on and everybody advises you to\nsetup a static server using NGINX or implement a cache proxying using Varnish or\nSquid. The biggest advantage that these servers have is that they support\n`sendfile` for sending static assets and is generally agreed upon that this is\n\"The Best\" method for sending static data. But Node doesn't have this advantage,\nit's removed from the core \"due to reasons\" and the only way to get decent file\nserving performance is to do aggressive caching of the assets in memory to reduce\nI/O operations as well as optimize for cache hits inside the browser or using\nconditional requests. And that is the goal of this project, _cache all the\nthings!_\n\n### Build status\n\nPlease note that the build status only displays the status of the GitHub master\nbranch. New stable versions are only released once the master passes all tests.\n\n[![Build Status](https://travis-ci.org/3rd-Eden/versions.png?branch=master)](https://travis-ci.org/3rd-Eden/versions)\n\n---\n\n## Features\n\nVersions comes with tons of features to make it easier for you to set up a\nsimple static server. We try to support as many features as a normal paid CDN\nwould provide for you.\n\n#### Origin Pull\n\nIn addition to serving files from disk you can also configure versions to pull\nstatic content from an origin server. This way you don't have to upload you\nstatic assets to a separate server in order to get them cached.\n\n#### Set caching headers for files\n\nIn order to reduce the amount of HTTP requests that a browser would do for your\nfiles, versions automatically sets the appropriate caching headers. This way you\nassets will be served from the browser cache instead of the server.\n\n#### Advanced gzipping\n\nGzip is enabled on every compatible file format, even if the origin server\ndoesn't support gzip. In addition to that, we have disabled gzip for IE 5 and\nIE6 without service pack 2 as it is known to improperly cache it. We also have\ndetection for obfuscated gzip headers as researched by the [Yahoo performance\nteam](http://developer.yahoo.com/blogs/ydn/posts/2010/12/pushing-beyond-gzipping/).\n\n#### REST API for managing your server\n\nYou can communicate with the server using a REST API. You can inspect items from\nthe cache, see what keys are cached or flush the server. The possibilities are\nendless.\n\n#### Metrics\n\nEverybody loves stats, that's why we are gathering metrics about the requests and\nthe state of the server. These metrics can be accessed through the REST API.\n\n#### Client API\n\nVersions comes with a dedicated client that can communicate with it's REST API's\nor through Pub/Sub.\n\n#### Synchronisation\n\nSynchronises configuration and versions number between different connected\nconsumers to ensure that they are all hitting the same cached version.\n\n#### Love\n\nIt's crafted and engineered with love, what else do you need?\n\n---\n\n## Installation\n\nInstallation is done through the node package manager (npm)\n\n```\nnpm install versions --save\n```\n\nThe `--save` tells npm to automatically add this file to the `dependencies`\nobject of your `package.json` file.\n\n## API references\n\nThe API references are generated from the source's JSDoc comments:\n\n- [Server API reference](/3rd-Eden/versions/blob/master/API/README.md)\n- [Client API reference](/3rd-Eden/versions/blob/master/API/client.md)\n\n## Configuration\n\nThe server can be configured in 2 different ways or a hybrid of both. It has a\ndedicated configuration file called `versions.json` that lives in the root of\nyour application folder (the application folder is the folder that contains your\nnode_modules folder). But you can also configure the module through a chainable\nAPI. And the last would be a hybrid of those. Using a configuration file and\nusing the API to override some of the configuration values.\n\n<dl>\n  <dt>auth</dd>\n  <dd>\n    <p>\n      The <code>auth</code> property is a simple security token that you can use\n      to secure your versions REST API. After setting this property it requires\n      an <code>?auth=<prop></code> parameter to be used to access the API.\n    </p>\n\n    <pre>versions.set('auth', 'Sup3rSecr3tP4z5w0rdy0');</pre>\n  </dd>\n\n  <dt>blacklisted extensions</dt>\n  <dd>\n    <p>\n      Black list extensions that you do not want to have pulled from your origin\n      server. You can for example black list <code>.conf</code> files or maybe\n      some other random files. Please note that people can still fetch these\n      files directly from the origin server.\n    </p>\n\n    <pre>versions.set('blacklisted extensions', ['.conf', '.log', '.gz']);</pre>\n  </dd>\n\n  <dt>cors</dt>\n  <dd>\n    <p>\n      Set custom <code>Access-Control-Allow-Origin</code> headers. The default\n      value is <code>*</code> so all values are allowed. If you only want to allow\n      access from a specific domain set the domain here.\n    </p>\n\n    <pre>versions.set('cors', '*.example.com');</pre>\n  </dd>\n\n  <dt>directory</dt>\n  <dd>\n    <p>\n      A directory that is relative to the module that required versions that is\n      used to serve static content. If you want this directory to be relative to\n      a different path. You can set a <code>root</code> property.\n    </p>\n\n    <pre>versions.set('directory', './public');</pre>\n  </dd>\n\n  <dt>force extensions</dt>\n  <dd>\n    <p>\n      Only allow files with an extension to be pulled from origin servers. The\n      reason behind this is that you might set your own site as full origin and\n      that would mean that your regular pages would also be proxied by versions\n      and create duplicate content. It's much less common that <code>.html</code>\n      are served. Thats why we force extensions by default.\n    </p>\n\n    <pre>versions.set('force extensions', false);</pre>\n  </dd>\n\n  <dt>expire internal cache</dt>\n  <dd>\n    <p>\n      How long should we keep items in our internal (memory) cache. It accepts a\n      numeric value as milliseconds or a human readable string like\n      <code>10 hours</code> or <code>90 minutes</code>. Defaults to 1 hour.\n    </p>\n\n    <pre>versions.set('expire internal cache', '2 days');</pre>\n  </dd>\n\n  <dt>max age</dt>\n  <dd>\n    <p>\n      How long should the browser cache the files? It accepts a numeric value as\n      miliseconds or a human readable string like <code>10 hours</code> or\n      <code>90 days</code>. Defaults to <code>30 days</code>. Please note that\n      this value should not be longer then a year.\n    </p>\n\n    <pre>versions.set('max age', '1 year')</pre>\n  </dd>\n\n  <dt>port</dt>\n  <dd>\n    <p>\n      As you might imagine, on which port number do you want to run the server.\n      Defaults to <code>8080</code>.\n    </p>\n\n    <pre>versions.set('port', '8080');</pre>\n  </dd>\n\n  <dt>origin servers</dt>\n  <dd>\n    <p>\n      An array of of server objects that is used to fetch resources that\n      are not found in the <code>directory</code> property.\n    </p>\n\n    <pre>versions.set('origin servers', { url: \"http://example.com\", name: \"foo\" });</pre>\n  </dd>\n\n  <dt>version</dt>\n  <dd>\n    <p>\n      The version number of the cache that can be automatically increased and\n      synced between clients so cache can be expired on demand and still have\n      the same version number/cache hits between different clients.\n    </p>\n\n    <pre>versions.set('version', '0.0.0');</pre>\n  </dd>\n\n  <dt>aliases</dt>\n  <dd>\n    <p>\n      In order to parallelize the downloading of assets in the browser they should\n      be spread across multiple subdomains/domains. You can supply \n      multiple origin servers that the client will use to distribute the assets.\n    </p>\n\n    <pre>versions.set('aliases', 'http://example.org');</pre>\n  </dt>\n\n  <dt>log level</dt>\n  <dd>\n    <p>\n      As versions is intended to run as a standalone server it comes with a logger\n      that outputs some useful information. You can control the amount of output\n      by changing the log level. The default value is log. Please check the\n      <a href=\"http://github.com/observing/devnull#logging-methods-and-levels\">dev/null node.js logger</a>\n      for the supported log levels.\n    </p>\n  \n    <pre>versions.set('log level', 'debug');</pre>\n  </dd>\n\n  <dt>plugins</dt>\n  <dd>\n    <p>\n      Versions is built on top of the connect framework and is configured to use the\n      minimal amount of plugins to get the job done. The plugins array allows\n      you to specify extra middleware layers that you want to have loaded into\n      versions or custom connect compatible nodejs modules that need to be\n      required.\n    </p>\n\n    <pre>versions.set('plugins', [{ name: 'logger', config: 'short' }, 'logger']);</pre>\n  </dd>\n\n  <dt>sync</dt>\n  <dd>\n    <p>\n      Synchronise configuration between client and server. If you are using\n      multiple servers also set the redis configuration.\n    </p>\n\n    <pre>versions.set('sync', true);</pre>\n  </dd>\n\n  <dt>redis</dt>\n  <dd>\n    <p>\n      In order to enable a truely distributed cache cloud you can opt in to use\n      a Redis back-end for syncing purposes. This object accepts the following\n      properties:\n    </p>\n\n    <ul>\n      <li>\n        <strong>host</strong>\n        The host name of your redis server.\n      </li>\n      <li>\n        <strong>port</strong>\n        The port number of your redis server.\n      </li>\n      <li>\n        <strong>auth</strong>\n        Optional auth/password to access your redis server.\n      <li>\n        <strong>namespace</strong>\n        The key that should be used to store the configuration and be used as the\n        channel name for the pub/sub channel. Defaults to <code>versions</code>\n      </li>\n    </ul>\n  </dd>\n</dl>\n\n### versions.json\n\nWhen you require the versions module it will try to find a `versions.json` (or\n`versions.js` with a module.exports pattern) file in your root folder and use\nthis as default configuration.\n\n```js\n{\n  \"auth\": \"my-secret-auth-key\",\n  \"blacklisted extensions\": [\".foo\", \".conf\"],\n  \"cors\": \"*\",\n  \"directory\": \"./public\",\n  \"expire internal cache\": \"1 hour\",\n  \"max age\": \"30 days\",\n  \"origin servers\": [\n    { \"url\": \"https://www.nodejitsu.com\", \"id\": \"home\" },\n    { \"url\": \"https://webops.nodejitsu.com\", \"id\": \"webops\" }\n  ],\n  \"port\": 8080,\n  \"plugins\": [\n    \"logger\",\n    \"custom-nodejs-module\",\n    { \n      \"name\": \"custom-nodejs-module\",\n      \"config\": {\n        \"custom\": \"configuration options that will be feed in to the middleware\"\n      }\n    }\n  ]\n}\n```\n\n### Configuration API\n\nIn addition to reading your `versions.json` file for the configuration it is also\npossible to set the configuration using dedicated API methods or the\n`versions#set` method. The `versions#set` method expects 2 arguments, the first\nargument is the name of the configuration key that you want to update and the\nsecond value is the actual value:\n\n```js\nvar versions = require('versions');\n\nversions.set('auth', 'superSec3rtp4ssw0rd')\n```\n\nThe API is also chainable, so you can do as many `versions#set` calls if needed.\nVersions also provides you with some API sugar to make configuring a bit more\nhuman readable:\n\n```js\nversions.path('/public').expire('10 hours').set('sync', true);\n```\n\nThe following API methods map directly to configuration (see versions.json\nconfiguration above for detailed information about what each configuration key\ntriggers):\n\nAPI       | Configuration key\n----------|------------------\npath      | directory\nlifetime  | max age\nexpire    | expire internal cache\n\n### Server example\n\n```javascript\n'use strict';\n\n// require versions, if you have `versions.json` in the same folder as your\n// `package.json` it will load that as default configuration for you\nvar versions = require('versions');\n\n// If you don't have a versions.json or want to override some values:\nversions.set('log level', 'debug')\n        .set('auth', 'helloW0nderW0man');\n\n// Or use some of the nicer API sugar\nversions.path('./public').lifetime('30 days').expire('10 hours');\n\n// After you have configured everything that you want just start listening on\n// the server.\nversions.listen(8080);\n```\n\nBut it can be much shorter if you don't have to overide any configuration from\nyour `versions.json` file:\n\n```javascript\nrequire('versions').listen();\n```\n\n## Rest API\n\n#### GET /flush\n\nCompletely removes the internal cache. This does not flush cache-headers for the\nHTTP requests.\n\nReturns:\n\n```js\n{\n  flush: 'OK'\n}\n```\n\n#### GET /expire?key=<key>\n\nRemoves the matched item(s) from the internal cache. It uses the value of\n`?key=key` to find and match it against request URLS in the cache.\n\nReturns:\n\n```js\n{\n  expire: 'OK',\n  expired: 1\n}\n```\n\n#### GET /inspect?key=<key>\n\nFinds the item in the cache and displays some information about it, like the\ntotal size of gzip, content-length etc.\n\nReturns:\n\n```js\n{\n  key: 'name of the key',\n  data: {\n    'Content-Length': 0,\n    'Content-Length Gzip': 0,\n    'Content-Type': 'text/html',\n    'Last-Modified': 'Sun, 31 Mar 2013 13:37:33 GMT'\n  }\n}\n```\n\nOr when a given key is not found:\n\n```js\n{ inspect: 'Failed to find the requested key file in cache' }\n```\n\n#### GET /keys\n\nLists all items that are currently in the cache.\n\nReturns:\n\n```js\n{\n  keys: [\n    \"versions:0.1.14#/css/jitsu.min.css\",\n    \"#/id:home/img/sprite.png\",\n    \"versions:0.1.14#/js/jitsu.min.js\",\n    \"#/id:home/img/nodepm.png\",\n    \"versions:0.1.14#/js/cortex.min.js\",\n    \"#/id:home/img/trusted.png\",\n    \"#/id:home/img/cloud.png\",\n    \"#/id:home/webfonts/ss-standard.woff\",\n    \"#/id:home/webfonts/ss-social-regular.woff\",\n    \"#/id:home/webfonts/ss-social-circle.woff\",\n    \"#/id:home/img/spinner.gif\"\n  ]\n}\n```\n\n#### GET /version\n\nGet the current version of internal cache.\n\nReturns:\n\n```json\n{ versions: '0.0.0' }\n```\n\n#### POST/PUT /version\n\nUpdate the server to a new version number, if Redis sync is also the changes will\nalso be synced with other instances.\n\nReturns:\n\n```js\n{ versions: '0.0.0' }\n```\n\nOr when no body is send:\n\n```js\n{ error: 'Invalid body' }\n```\n\n#### GET /allowed-versions\n\nGet the versioning allowed versions.\n\nReturns:\n\n```json\n{ 'allowed versions': ['0.0.1','0.2.0'] }\n```\n\n#### POST /version\n\nOverride server allowed versions with the allowed versions sent and the current version, if Redis sync is also the changes will\nalso be synced with other instances.\n\nBody:\n```json\n{ 'allowed versions': ['0.0.1','0.2.0'] }\n```\n\nReturns:\n\n```js\n{ 'allowed versions': ['0.0.1','0.2.0','0.0.0'] }\n```\n\nOr when no body is send:\n\n```js\n{ error: 'Invalid body' }\n```\n\n#### PUT /version\n\nAdd sent allowed versions to the current allowed versions, if Redis sync is also the changes will\nalso be synced with other instances.\n\nBody:\n```json\n{ 'allowed versions': ['1.0.1','3.2.1'] }\n```\n\nReturns:\n\n```json\n{ 'allowed versions': ['0.0.1','0.2.0','0.0.0','1.0.1','3.2.1'] }\n```\n\nOr when no body is send:\n\n```js\n{ error: 'Invalid body' }\n```\n\n#### DELETE /version _(Content-type:text/plain)_\n\nDelete every allowed version except for current version, if Redis sync is also the changes will\nalso be synced with other instances.\n\nReturns:\n\n```js\n{ 'allowed versions': ['0.0.0'] }\n```\n\n#### GET /metrics\n\nReturns a bunch of metrics.\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "_id": "syntagma-versions@0.0.2",
  "_from": "syntagma-versions@~0.0.2"
}
